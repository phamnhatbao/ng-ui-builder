import { Observable } from 'rxjs';

/**
 * @description
 * Define properties for a table cell.
 */
export interface TableCell {
  row: any;
  column: any;
  metadata: any;
}



/**
 * Pagination of table's options
 */
 export interface TablePagingConfig {
  /**
   * Config for showing the total of records.
   * Default is true.
   */
  showTotalRecords?: boolean;
  /** Display the total of records. */
  pageSizes?: number[];
  /** The default page size. */
  pageSize?: number;
  /** The default page number. */
  currentPage?: number;
}

export interface TableColumnConfig {
  // private id
  _id?: string;
  // display name of column
  displayName?: string;
  // field of your item data that you want to display
  field?: string;
  // header component that is a custom component
  headerCellComponent?: any;
  // cell component that is a custom component
  cellComponent?: any;
  // cell component data
  cellComponentData?: any;
  // cell class is your custom class on this cell
  cellClass?: string;
  // cell header class is your custom class on the header of cell
  cellHeaderClass?: string;
  // cell pipe is your custom pipe you want to filter data on this cell
  cellPipe?: string;
  // Use sort in your column
  useSort?: boolean;
  /**
   *  You can set default sort status in your column but remember c table
   *  don't support multi sort so only one row can set default sort.
   *  Available values : asc|desc
   */
  sort?: string;
  // Use filter in your column. You can setup advance filter options
  useFilter?: boolean;
  // filter options
  filterOptions?: {
    // check all filter data
    checkAll?: boolean;
    // data is an array of value you can choose to filter
    data?: any[];
    /**
     * autoGenerateData will help create all available value you can choose
     * but this options just affect when you use local table
     */
    autoGenerateData?: boolean;
    // list values you has choose to filter. You can use this options to set your default filter
    values?: any[]
    isCheckbox?: boolean;
  };
  // use search on this column
  useSearch?: boolean;
  // you can set search text to default search
  searchText?: string;
  // use filter date
  useFilterDate?: boolean;
  filterDateOptions?: {
    // minDate?:any;
    // maxDate?:any;
    format?: string;
    readOnly?: boolean
  };
  editableOptions?: any;
  // disable drag this column
  disableDrag?: boolean;
  // show or hidden on column config
  show?: boolean;
  // remove this column config
  off?: boolean;
  notNestedField?: boolean;
  // add tooltips column name
  displayNameTooltips?: string;
}

export interface CTableConfig {
  /** Table's title */
  title?: string;
  // use local data or remote data. Default is true.
  useLocalTable?: boolean;
  // return promise when table loaded
  loaded?:  { promise: Promise<any>, resolve: { [key: string]: any }, reject: { [key: string]: any} };
  /** Display table's footer (include pagination) */
  showFooter?: boolean;
  /** in case use remote data you must implement refresh function
   * refresh function will use as a callback with paramObject and instance of your table
   */
  refresh?: any;
  // data that is list item will be show on each row of table
  data?: any[];
  /** CSS class for table */
  cssClass?: string;
  /** CSS class for table's cover */
  cssCoverClass?: string;
  // responsive table
  columnDefs: TableColumnConfig[];
  // Show refresh button on table. Default is true.
  showRefresh?: boolean;
  // Use pagination on your table. Default is true.
  usePaging?: boolean;
  // pagination options
  pagingOptions?: TablePagingConfig;
  // Show total items in bottom of table
  showTotalItems?: boolean;
  // Use search all data in your table
  useSearch?: boolean;
  // isLoading
  idLoading?: string;
  isLoading?: boolean;
  // Use search options for advance search. Default it will search in all data of table
  searchOptions?: {
    // show input search if not you must implement your search input by using c-table-input-search component
    inputVisible?: boolean;
    // fields that you want to search on
    fields?: string[];
    // place holder text for search input
    placeHolderText?: string;
    // title for input search
    title?: string
  };
  /** Config customs information for what you want and you can access from cell of table */
  metadata?: any;
  // Use expand row will make your rows can expand and show a sub table. You must define expandRowOptions.
  useExpandRow?: boolean;
  // Expand row options when you use expand row
  expandRowOptions?: {
    // table options will be your table config
    tableOptions: any;
    // the field contain sub table
    field: string
  };
  rowClass?: any;
  rowClick?: any;
  // track by use to improve performance of ngFor
  trackBy?: any;
  /** The class used for your sort icon; all properties are required
   *  example: sortClass: {
   *    asc: 'your class'
   *    desc: 'your class'
   *    default: 'your class'
   *  }
   */
  sortClass?: {
    asc?: string,
    desc?: string,
    default?: string,
  };
  /** sortOrder the display column name and the type of sort
   *  example sortOrder {Column: 'asc'}
   */
  sortOrder?: any;

  // return new object search model using for fetch data, input are native search model and params receive from beforeSendData below
  mapSearchModel?: (model?: any, params?: any) => {};

  // pre fetch data which is necessary for fetching data, such as userName, userTeam .... Use with mapSearchModel function above
  beforeSendData?: (table?: any) => Observable<any>;
  isAutoLoad?: boolean;
  afterBuildRows?: any;
  // allow drag drop column to order
  useOrderColumn?: boolean;
  // allow to display or hide specific column
  useColumnConfig?: boolean;
  columnConfigOptions?: {
    // allow local storage save column config write your unique name for table
    localName: string
  };
}
